//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `office.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package TheOffice;

public class Request implements java.lang.Cloneable,
                                java.io.Serializable
{
    public RequestType type;

    public Data data;

    public Request()
    {
        this.type = RequestType.ID;
    }

    public Request(RequestType type, Data data)
    {
        this.type = type;
        this.data = data;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Request r = null;
        if(rhs instanceof Request)
        {
            r = (Request)rhs;
        }

        if(r != null)
        {
            if(this.type != r.type)
            {
                if(this.type == null || r.type == null || !this.type.equals(r.type))
                {
                    return false;
                }
            }
            if(this.data != r.data)
            {
                if(this.data == null || r.data == null || !this.data.equals(r.data))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::TheOffice::Request");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, type);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, data);
        return h_;
    }

    public Request clone()
    {
        Request c = null;
        try
        {
            c = (Request)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        RequestType.ice_write(ostr, this.type);
        ostr.writeValue(this.data);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.type = RequestType.ice_read(istr);
        istr.readValue(v -> data = v, Data.class);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Request v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Request ice_read(com.zeroc.Ice.InputStream istr)
    {
        Request v = new Request();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Request> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Request v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Request> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Request.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Request _nullMarshalValue = new Request();

    /** @hidden */
    public static final long serialVersionUID = 6730358270638405067L;
}
