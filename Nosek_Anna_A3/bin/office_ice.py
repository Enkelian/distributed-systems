# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `office.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module TheOffice
_M_TheOffice = Ice.openModule('TheOffice')
__name__ = 'TheOffice'

if 'RequestType' not in _M_TheOffice.__dict__:
    _M_TheOffice.RequestType = Ice.createTempClass()
    class RequestType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    RequestType.ID = RequestType("ID", 0)
    RequestType.LICENSE = RequestType("LICENSE", 1)
    RequestType.PASSPORT = RequestType("PASSPORT", 2)
    RequestType.RESIDENTREGISTRATION = RequestType("RESIDENTREGISTRATION", 3)
    RequestType._enumerators = { 0:RequestType.ID, 1:RequestType.LICENSE, 2:RequestType.PASSPORT, 3:RequestType.RESIDENTREGISTRATION }

    _M_TheOffice._t_RequestType = IcePy.defineEnum('::TheOffice::RequestType', RequestType, (), RequestType._enumerators)

    _M_TheOffice.RequestType = RequestType
    del RequestType

if 'Address' not in _M_TheOffice.__dict__:
    _M_TheOffice.Address = Ice.createTempClass()
    class Address(Ice.Value):
        def __init__(self, city='', street='', number=''):
            self.city = city
            self.street = street
            self.number = number

        def ice_id(self):
            return '::TheOffice::Address'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::Address'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_Address)

        __repr__ = __str__

    _M_TheOffice._t_Address = IcePy.defineValue('::TheOffice::Address', Address, -1, (), False, False, None, (
        ('city', (), IcePy._t_string, False, 0),
        ('street', (), IcePy._t_string, False, 0),
        ('number', (), IcePy._t_string, False, 0)
    ))
    Address._ice_type = _M_TheOffice._t_Address

    _M_TheOffice.Address = Address
    del Address

if 'Date' not in _M_TheOffice.__dict__:
    _M_TheOffice.Date = Ice.createTempClass()
    class Date(object):
        def __init__(self, year=0, month=0, day=0):
            self.year = year
            self.month = month
            self.day = day

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.year)
            _h = 5 * _h + Ice.getHash(self.month)
            _h = 5 * _h + Ice.getHash(self.day)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_TheOffice.Date):
                return NotImplemented
            else:
                if self.year is None or other.year is None:
                    if self.year != other.year:
                        return (-1 if self.year is None else 1)
                else:
                    if self.year < other.year:
                        return -1
                    elif self.year > other.year:
                        return 1
                if self.month is None or other.month is None:
                    if self.month != other.month:
                        return (-1 if self.month is None else 1)
                else:
                    if self.month < other.month:
                        return -1
                    elif self.month > other.month:
                        return 1
                if self.day is None or other.day is None:
                    if self.day != other.day:
                        return (-1 if self.day is None else 1)
                else:
                    if self.day < other.day:
                        return -1
                    elif self.day > other.day:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_Date)

        __repr__ = __str__

    _M_TheOffice._t_Date = IcePy.defineStruct('::TheOffice::Date', Date, (), (
        ('year', (), IcePy._t_int),
        ('month', (), IcePy._t_int),
        ('day', (), IcePy._t_int)
    ))

    _M_TheOffice.Date = Date
    del Date

if 'Time' not in _M_TheOffice.__dict__:
    _M_TheOffice.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, hour=0, minute=0, second=0):
            self.hour = hour
            self.minute = minute
            self.second = second

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.hour)
            _h = 5 * _h + Ice.getHash(self.minute)
            _h = 5 * _h + Ice.getHash(self.second)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_TheOffice.Time):
                return NotImplemented
            else:
                if self.hour is None or other.hour is None:
                    if self.hour != other.hour:
                        return (-1 if self.hour is None else 1)
                else:
                    if self.hour < other.hour:
                        return -1
                    elif self.hour > other.hour:
                        return 1
                if self.minute is None or other.minute is None:
                    if self.minute != other.minute:
                        return (-1 if self.minute is None else 1)
                else:
                    if self.minute < other.minute:
                        return -1
                    elif self.minute > other.minute:
                        return 1
                if self.second is None or other.second is None:
                    if self.second != other.second:
                        return (-1 if self.second is None else 1)
                else:
                    if self.second < other.second:
                        return -1
                    elif self.second > other.second:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_Time)

        __repr__ = __str__

    _M_TheOffice._t_Time = IcePy.defineStruct('::TheOffice::Time', Time, (), (
        ('hour', (), IcePy._t_int),
        ('minute', (), IcePy._t_int),
        ('second', (), IcePy._t_int)
    ))

    _M_TheOffice.Time = Time
    del Time

if 'DateTime' not in _M_TheOffice.__dict__:
    _M_TheOffice.DateTime = Ice.createTempClass()
    class DateTime(object):
        def __init__(self, date=Ice._struct_marker, time=Ice._struct_marker):
            if date is Ice._struct_marker:
                self.date = _M_TheOffice.Date()
            else:
                self.date = date
            if time is Ice._struct_marker:
                self.time = _M_TheOffice.Time()
            else:
                self.time = time

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.date)
            _h = 5 * _h + Ice.getHash(self.time)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_TheOffice.DateTime):
                return NotImplemented
            else:
                if self.date is None or other.date is None:
                    if self.date != other.date:
                        return (-1 if self.date is None else 1)
                else:
                    if self.date < other.date:
                        return -1
                    elif self.date > other.date:
                        return 1
                if self.time is None or other.time is None:
                    if self.time != other.time:
                        return (-1 if self.time is None else 1)
                else:
                    if self.time < other.time:
                        return -1
                    elif self.time > other.time:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_DateTime)

        __repr__ = __str__

    _M_TheOffice._t_DateTime = IcePy.defineStruct('::TheOffice::DateTime', DateTime, (), (
        ('date', (), _M_TheOffice._t_Date),
        ('time', (), _M_TheOffice._t_Time)
    ))

    _M_TheOffice.DateTime = DateTime
    del DateTime

if 'Data' not in _M_TheOffice.__dict__:
    _M_TheOffice.Data = Ice.createTempClass()
    class Data(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::TheOffice::Data'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::Data'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_Data)

        __repr__ = __str__

    _M_TheOffice._t_Data = IcePy.defineValue('::TheOffice::Data', Data, -1, (), False, False, None, ())
    Data._ice_type = _M_TheOffice._t_Data

    _M_TheOffice.Data = Data
    del Data

if 'ResidentRegistrationData' not in _M_TheOffice.__dict__:
    _M_TheOffice.ResidentRegistrationData = Ice.createTempClass()
    class ResidentRegistrationData(_M_TheOffice.Data):
        def __init__(self, name='', surname='', address=None):
            _M_TheOffice.Data.__init__(self)
            self.name = name
            self.surname = surname
            self.address = address

        def ice_id(self):
            return '::TheOffice::ResidentRegistrationData'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::ResidentRegistrationData'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_ResidentRegistrationData)

        __repr__ = __str__

    _M_TheOffice._t_ResidentRegistrationData = IcePy.declareValue('::TheOffice::ResidentRegistrationData')

    _M_TheOffice._t_ResidentRegistrationData = IcePy.defineValue('::TheOffice::ResidentRegistrationData', ResidentRegistrationData, -1, (), False, False, _M_TheOffice._t_Data, (
        ('name', (), IcePy._t_string, False, 0),
        ('surname', (), IcePy._t_string, False, 0),
        ('address', (), _M_TheOffice._t_Address, False, 0)
    ))
    ResidentRegistrationData._ice_type = _M_TheOffice._t_ResidentRegistrationData

    _M_TheOffice.ResidentRegistrationData = ResidentRegistrationData
    del ResidentRegistrationData

if 'DocumentData' not in _M_TheOffice.__dict__:
    _M_TheOffice.DocumentData = Ice.createTempClass()
    class DocumentData(_M_TheOffice.Data):
        def __init__(self, name='', surname='', pesel=''):
            _M_TheOffice.Data.__init__(self)
            self.name = name
            self.surname = surname
            self.pesel = pesel

        def ice_id(self):
            return '::TheOffice::DocumentData'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::DocumentData'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_DocumentData)

        __repr__ = __str__

    _M_TheOffice._t_DocumentData = IcePy.defineValue('::TheOffice::DocumentData', DocumentData, -1, (), False, False, _M_TheOffice._t_Data, (
        ('name', (), IcePy._t_string, False, 0),
        ('surname', (), IcePy._t_string, False, 0),
        ('pesel', (), IcePy._t_string, False, 0)
    ))
    DocumentData._ice_type = _M_TheOffice._t_DocumentData

    _M_TheOffice.DocumentData = DocumentData
    del DocumentData

if 'LicenseData' not in _M_TheOffice.__dict__:
    _M_TheOffice.LicenseData = Ice.createTempClass()
    class LicenseData(_M_TheOffice.Data):
        def __init__(self, documentData=None, category=''):
            _M_TheOffice.Data.__init__(self)
            self.documentData = documentData
            self.category = category

        def ice_id(self):
            return '::TheOffice::LicenseData'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::LicenseData'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_LicenseData)

        __repr__ = __str__

    _M_TheOffice._t_LicenseData = IcePy.declareValue('::TheOffice::LicenseData')

    _M_TheOffice._t_LicenseData = IcePy.defineValue('::TheOffice::LicenseData', LicenseData, -1, (), False, False, _M_TheOffice._t_Data, (
        ('documentData', (), _M_TheOffice._t_DocumentData, False, 0),
        ('category', (), IcePy._t_string, False, 0)
    ))
    LicenseData._ice_type = _M_TheOffice._t_LicenseData

    _M_TheOffice.LicenseData = LicenseData
    del LicenseData

if 'Response' not in _M_TheOffice.__dict__:
    _M_TheOffice.Response = Ice.createTempClass()
    class Response(Ice.Value):
        def __init__(self, message=''):
            self.message = message

        def ice_id(self):
            return '::TheOffice::Response'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::Response'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_Response)

        __repr__ = __str__

    _M_TheOffice._t_Response = IcePy.defineValue('::TheOffice::Response', Response, -1, (), False, False, None, (('message', (), IcePy._t_string, False, 0),))
    Response._ice_type = _M_TheOffice._t_Response

    _M_TheOffice.Response = Response
    del Response

if 'ErrorResponse' not in _M_TheOffice.__dict__:
    _M_TheOffice.ErrorResponse = Ice.createTempClass()
    class ErrorResponse(_M_TheOffice.Response):
        def __init__(self, message='', errorDetails=''):
            _M_TheOffice.Response.__init__(self, message)
            self.errorDetails = errorDetails

        def ice_id(self):
            return '::TheOffice::ErrorResponse'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::ErrorResponse'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_ErrorResponse)

        __repr__ = __str__

    _M_TheOffice._t_ErrorResponse = IcePy.defineValue('::TheOffice::ErrorResponse', ErrorResponse, -1, (), False, False, _M_TheOffice._t_Response, (('errorDetails', (), IcePy._t_string, False, 0),))
    ErrorResponse._ice_type = _M_TheOffice._t_ErrorResponse

    _M_TheOffice.ErrorResponse = ErrorResponse
    del ErrorResponse

if 'DocumentResponse' not in _M_TheOffice.__dict__:
    _M_TheOffice.DocumentResponse = Ice.createTempClass()
    class DocumentResponse(_M_TheOffice.Response):
        def __init__(self, message='', collectionDate=Ice._struct_marker):
            _M_TheOffice.Response.__init__(self, message)
            if collectionDate is Ice._struct_marker:
                self.collectionDate = _M_TheOffice.DateTime()
            else:
                self.collectionDate = collectionDate

        def ice_id(self):
            return '::TheOffice::DocumentResponse'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::DocumentResponse'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_DocumentResponse)

        __repr__ = __str__

    _M_TheOffice._t_DocumentResponse = IcePy.defineValue('::TheOffice::DocumentResponse', DocumentResponse, -1, (), False, False, _M_TheOffice._t_Response, (('collectionDate', (), _M_TheOffice._t_DateTime, False, 0),))
    DocumentResponse._ice_type = _M_TheOffice._t_DocumentResponse

    _M_TheOffice.DocumentResponse = DocumentResponse
    del DocumentResponse

if 'ResidentRegistrationResponse' not in _M_TheOffice.__dict__:
    _M_TheOffice.ResidentRegistrationResponse = Ice.createTempClass()
    class ResidentRegistrationResponse(_M_TheOffice.Response):
        def __init__(self, message='', address=None):
            _M_TheOffice.Response.__init__(self, message)
            self.address = address

        def ice_id(self):
            return '::TheOffice::ResidentRegistrationResponse'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::ResidentRegistrationResponse'

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_ResidentRegistrationResponse)

        __repr__ = __str__

    _M_TheOffice._t_ResidentRegistrationResponse = IcePy.declareValue('::TheOffice::ResidentRegistrationResponse')

    _M_TheOffice._t_ResidentRegistrationResponse = IcePy.defineValue('::TheOffice::ResidentRegistrationResponse', ResidentRegistrationResponse, -1, (), False, False, _M_TheOffice._t_Response, (('address', (), _M_TheOffice._t_Address, False, 0),))
    ResidentRegistrationResponse._ice_type = _M_TheOffice._t_ResidentRegistrationResponse

    _M_TheOffice.ResidentRegistrationResponse = ResidentRegistrationResponse
    del ResidentRegistrationResponse

if 'Request' not in _M_TheOffice.__dict__:
    _M_TheOffice.Request = Ice.createTempClass()
    class Request(object):
        def __init__(self, type=_M_TheOffice.RequestType.ID, data=None):
            self.type = type
            self.data = data

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_TheOffice.Request):
                return NotImplemented
            else:
                if self.type != other.type:
                    return False
                if self.data != other.data:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_Request)

        __repr__ = __str__

    _M_TheOffice._t_Request = IcePy.defineStruct('::TheOffice::Request', Request, (), (
        ('type', (), _M_TheOffice._t_RequestType),
        ('data', (), _M_TheOffice._t_Data)
    ))

    _M_TheOffice.Request = Request
    del Request

if 'OfficeDetails' not in _M_TheOffice.__dict__:
    _M_TheOffice.OfficeDetails = Ice.createTempClass()
    class OfficeDetails(object):
        def __init__(self, requestID=0, expectedResponseDateTime=Ice._struct_marker):
            self.requestID = requestID
            if expectedResponseDateTime is Ice._struct_marker:
                self.expectedResponseDateTime = _M_TheOffice.DateTime()
            else:
                self.expectedResponseDateTime = expectedResponseDateTime

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.requestID)
            _h = 5 * _h + Ice.getHash(self.expectedResponseDateTime)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_TheOffice.OfficeDetails):
                return NotImplemented
            else:
                if self.requestID is None or other.requestID is None:
                    if self.requestID != other.requestID:
                        return (-1 if self.requestID is None else 1)
                else:
                    if self.requestID < other.requestID:
                        return -1
                    elif self.requestID > other.requestID:
                        return 1
                if self.expectedResponseDateTime is None or other.expectedResponseDateTime is None:
                    if self.expectedResponseDateTime != other.expectedResponseDateTime:
                        return (-1 if self.expectedResponseDateTime is None else 1)
                else:
                    if self.expectedResponseDateTime < other.expectedResponseDateTime:
                        return -1
                    elif self.expectedResponseDateTime > other.expectedResponseDateTime:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_OfficeDetails)

        __repr__ = __str__

    _M_TheOffice._t_OfficeDetails = IcePy.defineStruct('::TheOffice::OfficeDetails', OfficeDetails, (), (
        ('requestID', (), IcePy._t_long),
        ('expectedResponseDateTime', (), _M_TheOffice._t_DateTime)
    ))

    _M_TheOffice.OfficeDetails = OfficeDetails
    del OfficeDetails

if 'RequestData' not in _M_TheOffice.__dict__:
    _M_TheOffice.RequestData = Ice.createTempClass()
    class RequestData(object):
        def __init__(self, request=Ice._struct_marker, officeData=Ice._struct_marker):
            if request is Ice._struct_marker:
                self.request = _M_TheOffice.Request()
            else:
                self.request = request
            if officeData is Ice._struct_marker:
                self.officeData = _M_TheOffice.OfficeDetails()
            else:
                self.officeData = officeData

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_TheOffice.RequestData):
                return NotImplemented
            else:
                if self.request != other.request:
                    return False
                if self.officeData != other.officeData:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_RequestData)

        __repr__ = __str__

    _M_TheOffice._t_RequestData = IcePy.defineStruct('::TheOffice::RequestData', RequestData, (), (
        ('request', (), _M_TheOffice._t_Request),
        ('officeData', (), _M_TheOffice._t_OfficeDetails)
    ))

    _M_TheOffice.RequestData = RequestData
    del RequestData

_M_TheOffice._t_Office = IcePy.defineValue('::TheOffice::Office', Ice.Value, -1, (), False, True, None, ())

if 'OfficePrx' not in _M_TheOffice.__dict__:
    _M_TheOffice.OfficePrx = Ice.createTempClass()
    class OfficePrx(Ice.ObjectPrx):

        def sendRequest(self, request, context=None):
            return _M_TheOffice.Office._op_sendRequest.invoke(self, ((request, ), context))

        def sendRequestAsync(self, request, context=None):
            return _M_TheOffice.Office._op_sendRequest.invokeAsync(self, ((request, ), context))

        def begin_sendRequest(self, request, _response=None, _ex=None, _sent=None, context=None):
            return _M_TheOffice.Office._op_sendRequest.begin(self, ((request, ), _response, _ex, _sent, context))

        def end_sendRequest(self, _r):
            return _M_TheOffice.Office._op_sendRequest.end(self, _r)

        def getResult(self, requestID, context=None):
            return _M_TheOffice.Office._op_getResult.invoke(self, ((requestID, ), context))

        def getResultAsync(self, requestID, context=None):
            return _M_TheOffice.Office._op_getResult.invokeAsync(self, ((requestID, ), context))

        def begin_getResult(self, requestID, _response=None, _ex=None, _sent=None, context=None):
            return _M_TheOffice.Office._op_getResult.begin(self, ((requestID, ), _response, _ex, _sent, context))

        def end_getResult(self, _r):
            return _M_TheOffice.Office._op_getResult.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_TheOffice.OfficePrx.ice_checkedCast(proxy, '::TheOffice::Office', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_TheOffice.OfficePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::TheOffice::Office'
    _M_TheOffice._t_OfficePrx = IcePy.defineProxy('::TheOffice::Office', OfficePrx)

    _M_TheOffice.OfficePrx = OfficePrx
    del OfficePrx

    _M_TheOffice.Office = Ice.createTempClass()
    class Office(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::TheOffice::Office')

        def ice_id(self, current=None):
            return '::TheOffice::Office'

        @staticmethod
        def ice_staticId():
            return '::TheOffice::Office'

        def sendRequest(self, request, current=None):
            raise NotImplementedError("servant method 'sendRequest' not implemented")

        def getResult(self, requestID, current=None):
            raise NotImplementedError("servant method 'getResult' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_TheOffice._t_OfficeDisp)

        __repr__ = __str__

    _M_TheOffice._t_OfficeDisp = IcePy.defineClass('::TheOffice::Office', Office, (), None, ())
    Office._ice_type = _M_TheOffice._t_OfficeDisp

    Office._op_sendRequest = IcePy.Operation('sendRequest', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_TheOffice._t_Request, False, 0),), (), ((), _M_TheOffice._t_OfficeDetails, False, 0), ())
    Office._op_getResult = IcePy.Operation('getResult', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_TheOffice._t_Response, False, 0), ())

    _M_TheOffice.Office = Office
    del Office

# End of module TheOffice
